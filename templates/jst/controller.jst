/**
 * MambaJSFramework
 *
 * @description :: AngularJS controller as Immediatelly Invoked Function Expression (IIFE)
 *                 An IIFE removes variables from the global scope. This helps prevent variables
 *                 and function declarations from living longer than expected in the global scope,
 *                 which also helps avoid variable collisions.
 *
 *                 Mamba JS use angular.extend for bind data or functions to views instead of vm, this is
 *                 because using extend give more clean and Object oriented code, so you can keep things clear
 *                 about your private and public variables or methods.
 *
 * @help        :: See https://github.com/cadrogui/MambaJS-Framework#readme
 *
 */

(function() {
  'use strict';

  angular
      .module('<%= module %>')
      .controller('<%= name %>', <%= name %>)
      .controller('<%= name %>List', <%= name %>List)

  <%= name %>.$inject = ['$scope', '$controller', '$rootScope', '_http']
  <%= name %>List.$inject = ['$scope', '$controller', '$rootScope', '_http']

  function <%= name %>($scope, $controller, $rootScope, _http) {

    /*
      Bindable Members Up Top
      Placing bindable members at the top makes it easy to read and helps you instantly identify which
      members of the controller can be bound and used in the View

      Public methods and variables are in angular.extend, and are exposed to views when
      controller as syntax is used, if you want to get data binding you must use the
      angular.extend again with the variable.

      ex:
        MyFactory.method().then(function(data){
          angular.extend(vm, {
            viewVar: data
          })
        })
    */

    var vm = this

    /*
      for inheritance on dependency injection in parent controller or AppController
      declare the dependency ex: this.$state = $state, and use here:
      angular.extend(this, $controller('AppController', { $scope, $scope }))
    */

    /*
      in multiple named views update the data un view as
      this.$state.go(this.$state.current.name, {}, { reload: true })
    */

    // Here are all public vars or methods.

    angular.extend(vm, {
    <% methods.forEach(function(name) { %>  <%- name %>: <%- name %>,
    <% }); %> });

    <% methods.forEach(function(name) { %>

    <% if(name == 'Create'){ %>

    function <%- name %>(obj){
      _http.request({
        method: 'POST',
        endpoint: '<%= endpoint %>',
        data: obj
      })
      .then(data => {
        $rootScope.$broadcast('share-data', data[0])
      })
    }
    <%}else{%>
    function <%- name %>(){
      // ...
    }
    <%}%>
    <% }); %>
  }

  /*
    <%= name %>List Controller
  */

  function <%= name %>List($scope, $controller, $rootScope, _http) {

    let vm = this

    _http.request({
      method: 'GET',
      endpoint: '<%= endpoint %>/list',
    })
    .then(data => {
      $scope.$broadcast('populate', data)
    })

    $scope.$on('share-data', function(e,d){
      $scope.$broadcast('populateNewData', d)
    })

    angular.extend(vm, {
      update: update,
      eliminar: eliminar
    })

    function eliminar(id){
      _http.request({
        method: 'DELETE',
        endpoint: '<%= endpoint %>',
        params: { id: id }
      })
      .then(data => {
        $scope.$broadcast('deleteElement', id)
      })
    }

    function update(obj){
      _http.request({
        method: 'PUT',
        endpoint: '<%= endpoint %>',
        data: obj
      })
    }
  }

})();
